// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test welcome page should render arango page correctly 1`] = `
"<!--views/partials/head.ejs-->
<meta charset='UTF-8'>
<!--CSS (load bootstrap from a CDN)-->
<link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/open-fonts@1.1.1/fonts/inter.min.css\\">
<link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/@exampledev/new.css@1.1.2/new.min.css\\">
<link rel=\\"icon\\" type=\\"image/gif\\" href=\\"/database.gif\\">
<style>
    input {
        text-align: center;
        width: 400px;
        height: 40px;
        margin: 5px;
    }
    button {
        width: 400px;
        height: 40px;
        margin: 10px;
    }
    .home {
        cursor: pointer;
    }
    .card {
        width: 450px;
        margin: auto;
    }
    .card > * {
        text-align: center;
    }
    .subtitle {
        margin: 10px;
    }
    .body {
        margin: 10px;
    }
</style>
<html lang=\\"en\\">
  <head>
    <title>learndatabases.dev</title>
  </head>
  <header>
    <h1 class=\\"home umami--click--home-button\\">Learn Databases</h1>
    
    
      <p><a href=\\"/signin\\" class=\\"umami--click--login-button\\">Login</a> / <a href=\\"/signup\\" class=\\"umami--click--signup-button\\">Signup</a></p>
    
  </header>
</html>
<script>
  const home = document.querySelector('.home')
  home.addEventListener('click', () => {
    return location.href = '/'
  })

  
</script>

<h3>Learn Arango</h3>
<div id=\\"introduction\\"></div>
<div id=\\"content\\"></div>
<script src=\\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\\"></script>
<script
  src=\\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.2.0/highlight.min.js\\"
  integrity=\\"sha512-TDKKr+IvoqZnPzc3l35hdjpHD0m+b2EC2SrLEgKDRWpxf2rFCxemkgvJ5kfU48ip+Y+m2XVKyOCD85ybtlZDmw==\\"
  crossorigin=\\"anonymous\\"
></script>
<link
  rel=\\"stylesheet\\"
  href=\\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.2.0/styles/tomorrow.min.css\\"
  integrity=\\"sha512-r3qr7vMdHYmWUzqC7l4H/W03ikAyiFIQld+B71yAmHhu7wcsnvm/adhikM+FzDxxK9ewznhCVnAm+yYZpPBnSg==\\"
  crossorigin=\\"anonymous\\"
/>
<script>
  const dbHost = \\"arangodb.learndatabases.dev\\";
  const username = \\"\\";
  const dbPassword = \\"\\";
  const dbExists = false;
  const database = \\"Arango\\";

  const credentials = document.createElement(\\"pre\\");
  const renderCredentials = (username, dbPassword) => {
    const creds = \`host: \${dbHost}\\\\nusername: \${username}\\\\npassword: \${dbPassword}\\\\n\`;
    /**
     **** EACH TIME A DATABASE IS ADDED, ADD TO THE endingChoice OBJECT ****
     * This is the only change you need to make if you are altering
     * this file because another database has been implemented.
     */
    const endingChoice = {
      Postgres: \`database: \${username}\`,
      Elasticsearch: \`index: \${username}-*\`,
      Arango: \`databaseName: \${username}\`,
    };
    credentials.innerHTML = \`<code>\${creds}\${endingChoice[database]}</code>\`;
    introduction.append(credentials);
  };

  const content = document.getElementById(\\"content\\");
  const renderContent = async (username, dbPassword) => {
    const r = await fetch(\`/lessons/\${database}.md\`).then((r) => r.text());
    marked.setOptions({
      highlight: function (code) {
        return hljs.highlightAuto(code).value;
      },
    });
    const markedHTML = marked(r);
    const markedHTMLwithUserData = markedHTML
      .replace(/@username/gi, username)
      .replace(/@dbPassword/gi, dbPassword);
    content.innerHTML = markedHTMLwithUserData;
  };

  let disabled;
  const createDb = async () => {
    if (disabled) return;
    disabled = true;
    createDb_button.classList.add(\\"disabled\\");
    createDb_button.innerText = \\"Creating...\\";

    const res = await fetch(\`/api/createDatabase/\${database}\`, {
      method: \\"POST\\",
    }).then((r) => r.json());
    const { error, username, dbPassword, email } = res;
    if (error) {
      alert(error.message);
      disabled = false;
      createDb_button.classList.remove(\\"disabled\\");
      createDb_button.innerText = \\"Create my database\\";
      return;
    }
    alert(
      email
        ? \\"Your database has been successfully created!\\"
        : \\"Your temporary database has been successfully created!\\\\r\\\\nSince credentials are provided only once, please keep the information somewhere safe.\\"
    );
    createDb_button.style.opacity = 0;
    setTimeout(() => {
      createDb_button.innerText = \\"Complete!\\";
      createDb_button.style.background = \\"rgb(10, 170, 75)\\";
      createDb_button.style.opacity = 1;
      setTimeout(() => {
        renderCredentials(username, dbPassword);
        renderContent(username, dbPassword);
      }, 200);
    }, 200);
  };

  const createDb_button = document.createElement(\\"button\\");
  createDb_button.id = \\"createDb\\";
  createDb_button.innerText = \\"Create my database\\";
  createDb_button.addEventListener(\\"click\\", createDb);

  (function setIntroduction() {
    const vowelsTable = [\\"A\\", \\"E\\", \\"I\\", \\"O\\", \\"U\\"].reduce((acc, vowel) => {
      acc[vowel] = true;
      return acc;
    }, {});
    const a = \`a\${vowelsTable[database[0]] ? \\"n\\" : \\"\\"}\`;
    const introduction = document.getElementById(\\"introduction\\");
    const messageOpening = \`<p>In this module, you can learn how to use \${database}. \`;
    if (!username || !dbExists) {
      const tense = !username ? \\"temporary \\" : \\"\\";
      const messageMiddle = \`Don't have \${database} installed on your local machine yet? Fear not! We can make \${a} \${database} database for you. Simply click on the button below to create your \${tense}database. Credentials for your database will appear after it is done being created.</p>\`;
      const messageEnding = !username
        ? \`<p>Temporary database credentials will expire in 5 days. If you want, you can sign up with us and get a non-expiring \${database} database!</p>\`
        : \\"\\";
      introduction.innerHTML = \`\${messageOpening}\${messageMiddle}\${messageEnding}\`;
      introduction.append(createDb_button);
      return renderContent(\\"username\\", \\"dbPassword\\");
    }
    introduction.innerHTML = \`\${messageOpening}You have already created \${a} \${database} database on our server. Here are the credentials for your database.</p>\`;
    renderCredentials(username, dbPassword);
    renderContent(username, dbPassword);
  })();
</script>
<style>
  #createDb {
    display: block;
    margin: auto;
    margin-top: 26px;
    margin-bottom: 26px;
    transition: 0.2s;
  }

  #createDb.disabled {
    cursor: default;
  }
</style>
"
`;

exports[`test welcome page should render elasticsearch page correctly 1`] = `
"<!--views/partials/head.ejs-->
<meta charset='UTF-8'>
<!--CSS (load bootstrap from a CDN)-->
<link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/open-fonts@1.1.1/fonts/inter.min.css\\">
<link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/@exampledev/new.css@1.1.2/new.min.css\\">
<link rel=\\"icon\\" type=\\"image/gif\\" href=\\"/database.gif\\">
<style>
    input {
        text-align: center;
        width: 400px;
        height: 40px;
        margin: 5px;
    }
    button {
        width: 400px;
        height: 40px;
        margin: 10px;
    }
    .home {
        cursor: pointer;
    }
    .card {
        width: 450px;
        margin: auto;
    }
    .card > * {
        text-align: center;
    }
    .subtitle {
        margin: 10px;
    }
    .body {
        margin: 10px;
    }
</style>
<html lang=\\"en\\">
  <head>
    <title>learndatabases.dev</title>
  </head>
  <header>
    <h1 class=\\"home umami--click--home-button\\">Learn Databases</h1>
    
    
      <p><a href=\\"/signin\\" class=\\"umami--click--login-button\\">Login</a> / <a href=\\"/signup\\" class=\\"umami--click--signup-button\\">Signup</a></p>
    
  </header>
</html>
<script>
  const home = document.querySelector('.home')
  home.addEventListener('click', () => {
    return location.href = '/'
  })

  
</script>

<h3>Learn Elasticsearch</h3>
<div id=\\"introduction\\"></div>
<div id=\\"content\\"></div>
<script src=\\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\\"></script>
<script
  src=\\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.2.0/highlight.min.js\\"
  integrity=\\"sha512-TDKKr+IvoqZnPzc3l35hdjpHD0m+b2EC2SrLEgKDRWpxf2rFCxemkgvJ5kfU48ip+Y+m2XVKyOCD85ybtlZDmw==\\"
  crossorigin=\\"anonymous\\"
></script>
<link
  rel=\\"stylesheet\\"
  href=\\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.2.0/styles/tomorrow.min.css\\"
  integrity=\\"sha512-r3qr7vMdHYmWUzqC7l4H/W03ikAyiFIQld+B71yAmHhu7wcsnvm/adhikM+FzDxxK9ewznhCVnAm+yYZpPBnSg==\\"
  crossorigin=\\"anonymous\\"
/>
<script>
  const dbHost = \\"elastic.learndatabases.dev\\";
  const username = \\"\\";
  const dbPassword = \\"\\";
  const dbExists = false;
  const database = \\"Elasticsearch\\";

  const credentials = document.createElement(\\"pre\\");
  const renderCredentials = (username, dbPassword) => {
    const creds = \`host: \${dbHost}\\\\nusername: \${username}\\\\npassword: \${dbPassword}\\\\n\`;
    /**
     **** EACH TIME A DATABASE IS ADDED, ADD TO THE endingChoice OBJECT ****
     * This is the only change you need to make if you are altering
     * this file because another database has been implemented.
     */
    const endingChoice = {
      Postgres: \`database: \${username}\`,
      Elasticsearch: \`index: \${username}-*\`,
      Arango: \`databaseName: \${username}\`,
    };
    credentials.innerHTML = \`<code>\${creds}\${endingChoice[database]}</code>\`;
    introduction.append(credentials);
  };

  const content = document.getElementById(\\"content\\");
  const renderContent = async (username, dbPassword) => {
    const r = await fetch(\`/lessons/\${database}.md\`).then((r) => r.text());
    marked.setOptions({
      highlight: function (code) {
        return hljs.highlightAuto(code).value;
      },
    });
    const markedHTML = marked(r);
    const markedHTMLwithUserData = markedHTML
      .replace(/@username/gi, username)
      .replace(/@dbPassword/gi, dbPassword);
    content.innerHTML = markedHTMLwithUserData;
  };

  let disabled;
  const createDb = async () => {
    if (disabled) return;
    disabled = true;
    createDb_button.classList.add(\\"disabled\\");
    createDb_button.innerText = \\"Creating...\\";

    const res = await fetch(\`/api/createDatabase/\${database}\`, {
      method: \\"POST\\",
    }).then((r) => r.json());
    const { error, username, dbPassword, email } = res;
    if (error) {
      alert(error.message);
      disabled = false;
      createDb_button.classList.remove(\\"disabled\\");
      createDb_button.innerText = \\"Create my database\\";
      return;
    }
    alert(
      email
        ? \\"Your database has been successfully created!\\"
        : \\"Your temporary database has been successfully created!\\\\r\\\\nSince credentials are provided only once, please keep the information somewhere safe.\\"
    );
    createDb_button.style.opacity = 0;
    setTimeout(() => {
      createDb_button.innerText = \\"Complete!\\";
      createDb_button.style.background = \\"rgb(10, 170, 75)\\";
      createDb_button.style.opacity = 1;
      setTimeout(() => {
        renderCredentials(username, dbPassword);
        renderContent(username, dbPassword);
      }, 200);
    }, 200);
  };

  const createDb_button = document.createElement(\\"button\\");
  createDb_button.id = \\"createDb\\";
  createDb_button.innerText = \\"Create my database\\";
  createDb_button.addEventListener(\\"click\\", createDb);

  (function setIntroduction() {
    const vowelsTable = [\\"A\\", \\"E\\", \\"I\\", \\"O\\", \\"U\\"].reduce((acc, vowel) => {
      acc[vowel] = true;
      return acc;
    }, {});
    const a = \`a\${vowelsTable[database[0]] ? \\"n\\" : \\"\\"}\`;
    const introduction = document.getElementById(\\"introduction\\");
    const messageOpening = \`<p>In this module, you can learn how to use \${database}. \`;
    if (!username || !dbExists) {
      const tense = !username ? \\"temporary \\" : \\"\\";
      const messageMiddle = \`Don't have \${database} installed on your local machine yet? Fear not! We can make \${a} \${database} database for you. Simply click on the button below to create your \${tense}database. Credentials for your database will appear after it is done being created.</p>\`;
      const messageEnding = !username
        ? \`<p>Temporary database credentials will expire in 5 days. If you want, you can sign up with us and get a non-expiring \${database} database!</p>\`
        : \\"\\";
      introduction.innerHTML = \`\${messageOpening}\${messageMiddle}\${messageEnding}\`;
      introduction.append(createDb_button);
      return renderContent(\\"username\\", \\"dbPassword\\");
    }
    introduction.innerHTML = \`\${messageOpening}You have already created \${a} \${database} database on our server. Here are the credentials for your database.</p>\`;
    renderCredentials(username, dbPassword);
    renderContent(username, dbPassword);
  })();
</script>
<style>
  #createDb {
    display: block;
    margin: auto;
    margin-top: 26px;
    margin-bottom: 26px;
    transition: 0.2s;
  }

  #createDb.disabled {
    cursor: default;
  }
</style>
"
`;

exports[`test welcome page should render postgres page correctly 1`] = `
"<!--views/partials/head.ejs-->
<meta charset='UTF-8'>
<!--CSS (load bootstrap from a CDN)-->
<link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/open-fonts@1.1.1/fonts/inter.min.css\\">
<link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/@exampledev/new.css@1.1.2/new.min.css\\">
<link rel=\\"icon\\" type=\\"image/gif\\" href=\\"/database.gif\\">
<style>
    input {
        text-align: center;
        width: 400px;
        height: 40px;
        margin: 5px;
    }
    button {
        width: 400px;
        height: 40px;
        margin: 10px;
    }
    .home {
        cursor: pointer;
    }
    .card {
        width: 450px;
        margin: auto;
    }
    .card > * {
        text-align: center;
    }
    .subtitle {
        margin: 10px;
    }
    .body {
        margin: 10px;
    }
</style>
<html lang=\\"en\\">
  <head>
    <title>learndatabases.dev</title>
  </head>
  <header>
    <h1 class=\\"home umami--click--home-button\\">Learn Databases</h1>
    
    
      <p><a href=\\"/signin\\" class=\\"umami--click--login-button\\">Login</a> / <a href=\\"/signup\\" class=\\"umami--click--signup-button\\">Signup</a></p>
    
  </header>
</html>
<script>
  const home = document.querySelector('.home')
  home.addEventListener('click', () => {
    return location.href = '/'
  })

  
</script>

<h3>Learn Postgres</h3>
<div id=\\"introduction\\"></div>
<div id=\\"content\\"></div>
<script src=\\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\\"></script>
<script
  src=\\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.2.0/highlight.min.js\\"
  integrity=\\"sha512-TDKKr+IvoqZnPzc3l35hdjpHD0m+b2EC2SrLEgKDRWpxf2rFCxemkgvJ5kfU48ip+Y+m2XVKyOCD85ybtlZDmw==\\"
  crossorigin=\\"anonymous\\"
></script>
<link
  rel=\\"stylesheet\\"
  href=\\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.2.0/styles/tomorrow.min.css\\"
  integrity=\\"sha512-r3qr7vMdHYmWUzqC7l4H/W03ikAyiFIQld+B71yAmHhu7wcsnvm/adhikM+FzDxxK9ewznhCVnAm+yYZpPBnSg==\\"
  crossorigin=\\"anonymous\\"
/>
<script>
  const dbHost = \\"learndatabases.dev\\";
  const username = \\"\\";
  const dbPassword = \\"\\";
  const dbExists = false;
  const database = \\"Postgres\\";

  const credentials = document.createElement(\\"pre\\");
  const renderCredentials = (username, dbPassword) => {
    const creds = \`host: \${dbHost}\\\\nusername: \${username}\\\\npassword: \${dbPassword}\\\\n\`;
    /**
     **** EACH TIME A DATABASE IS ADDED, ADD TO THE endingChoice OBJECT ****
     * This is the only change you need to make if you are altering
     * this file because another database has been implemented.
     */
    const endingChoice = {
      Postgres: \`database: \${username}\`,
      Elasticsearch: \`index: \${username}-*\`,
      Arango: \`databaseName: \${username}\`,
    };
    credentials.innerHTML = \`<code>\${creds}\${endingChoice[database]}</code>\`;
    introduction.append(credentials);
  };

  const content = document.getElementById(\\"content\\");
  const renderContent = async (username, dbPassword) => {
    const r = await fetch(\`/lessons/\${database}.md\`).then((r) => r.text());
    marked.setOptions({
      highlight: function (code) {
        return hljs.highlightAuto(code).value;
      },
    });
    const markedHTML = marked(r);
    const markedHTMLwithUserData = markedHTML
      .replace(/@username/gi, username)
      .replace(/@dbPassword/gi, dbPassword);
    content.innerHTML = markedHTMLwithUserData;
  };

  let disabled;
  const createDb = async () => {
    if (disabled) return;
    disabled = true;
    createDb_button.classList.add(\\"disabled\\");
    createDb_button.innerText = \\"Creating...\\";

    const res = await fetch(\`/api/createDatabase/\${database}\`, {
      method: \\"POST\\",
    }).then((r) => r.json());
    const { error, username, dbPassword, email } = res;
    if (error) {
      alert(error.message);
      disabled = false;
      createDb_button.classList.remove(\\"disabled\\");
      createDb_button.innerText = \\"Create my database\\";
      return;
    }
    alert(
      email
        ? \\"Your database has been successfully created!\\"
        : \\"Your temporary database has been successfully created!\\\\r\\\\nSince credentials are provided only once, please keep the information somewhere safe.\\"
    );
    createDb_button.style.opacity = 0;
    setTimeout(() => {
      createDb_button.innerText = \\"Complete!\\";
      createDb_button.style.background = \\"rgb(10, 170, 75)\\";
      createDb_button.style.opacity = 1;
      setTimeout(() => {
        renderCredentials(username, dbPassword);
        renderContent(username, dbPassword);
      }, 200);
    }, 200);
  };

  const createDb_button = document.createElement(\\"button\\");
  createDb_button.id = \\"createDb\\";
  createDb_button.innerText = \\"Create my database\\";
  createDb_button.addEventListener(\\"click\\", createDb);

  (function setIntroduction() {
    const vowelsTable = [\\"A\\", \\"E\\", \\"I\\", \\"O\\", \\"U\\"].reduce((acc, vowel) => {
      acc[vowel] = true;
      return acc;
    }, {});
    const a = \`a\${vowelsTable[database[0]] ? \\"n\\" : \\"\\"}\`;
    const introduction = document.getElementById(\\"introduction\\");
    const messageOpening = \`<p>In this module, you can learn how to use \${database}. \`;
    if (!username || !dbExists) {
      const tense = !username ? \\"temporary \\" : \\"\\";
      const messageMiddle = \`Don't have \${database} installed on your local machine yet? Fear not! We can make \${a} \${database} database for you. Simply click on the button below to create your \${tense}database. Credentials for your database will appear after it is done being created.</p>\`;
      const messageEnding = !username
        ? \`<p>Temporary database credentials will expire in 5 days. If you want, you can sign up with us and get a non-expiring \${database} database!</p>\`
        : \\"\\";
      introduction.innerHTML = \`\${messageOpening}\${messageMiddle}\${messageEnding}\`;
      introduction.append(createDb_button);
      return renderContent(\\"username\\", \\"dbPassword\\");
    }
    introduction.innerHTML = \`\${messageOpening}You have already created \${a} \${database} database on our server. Here are the credentials for your database.</p>\`;
    renderCredentials(username, dbPassword);
    renderContent(username, dbPassword);
  })();
</script>
<style>
  #createDb {
    display: block;
    margin: auto;
    margin-top: 26px;
    margin-bottom: 26px;
    transition: 0.2s;
  }

  #createDb.disabled {
    cursor: default;
  }
</style>
"
`;

exports[`test welcome page should render resetPassword page correctly 1`] = `
"<!--views/partials/head.ejs-->
<meta charset='UTF-8'>
<!--CSS (load bootstrap from a CDN)-->
<link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/open-fonts@1.1.1/fonts/inter.min.css\\">
<link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/@exampledev/new.css@1.1.2/new.min.css\\">
<link rel=\\"icon\\" type=\\"image/gif\\" href=\\"/database.gif\\">
<style>
    input {
        text-align: center;
        width: 400px;
        height: 40px;
        margin: 5px;
    }
    button {
        width: 400px;
        height: 40px;
        margin: 10px;
    }
    .home {
        cursor: pointer;
    }
    .card {
        width: 450px;
        margin: auto;
    }
    .card > * {
        text-align: center;
    }
    .subtitle {
        margin: 10px;
    }
    .body {
        margin: 10px;
    }
</style>
<html lang=\\"en\\">
  <head>
    <title>learndatabases.dev</title>
  </head>
  <header>
    <h1 class=\\"home umami--click--home-button\\">Learn Databases</h1>
    
    
      <p><a href=\\"/signin\\" class=\\"umami--click--login-button\\">Login</a> / <a href=\\"/signup\\" class=\\"umami--click--signup-button\\">Signup</a></p>
    
  </header>
</html>
<script>
  const home = document.querySelector('.home')
  home.addEventListener('click', () => {
    return location.href = '/'
  })

  
</script>

<main>
  <div class=\\"card\\">
    <div class=\\"body\\">
      <h3 class=\\"subtitle\\">Reset your password</h3>
      <input class=\\"email\\" placeholder=\\"Email\\" /><br />
      <button class=\\"submit\\">Submit</button>
    </div>
    <div class=\\"tale\\">
      <div>Wanna go back? <a href=\\"/signin\\">Log In</a></div>
    </div>
  </div>
</main>

<script>
  const submit = document.querySelector(\\".submit\\");
  const email = document.querySelector(\\".email\\");

  submit.addEventListener(\\"click\\", () => {
    fetch(\\"/api/notifications\\", {
      method: \\"POST\\",
      headers: {
        \\"content-type\\": \\"application/json\\",
      },
      body: JSON.stringify({
        email: email.value,
      }),
    })
      .then((r) => r.json())
      .then((r) => {
        if (r.error) {
          alert(r.error.message);
        } else {
          alert(
            \\"Check your email (don't forget to check the spam box!) and set your password\\"
          );
          return (location.href = \\"/signin\\");
        }
      });
  });
</script>
"
`;

exports[`test welcome page should render setDBpassword page correctly 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
<head>
<meta charset=\\"utf-8\\">
<title>Error</title>
</head>
<body>
<pre>Cannot GET /setDBpassword</pre>
</body>
</html>
"
`;

exports[`test welcome page should render setPassword page correctly 1`] = `
"<!--views/partials/head.ejs-->
<meta charset='UTF-8'>
<!--CSS (load bootstrap from a CDN)-->
<link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/open-fonts@1.1.1/fonts/inter.min.css\\">
<link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/@exampledev/new.css@1.1.2/new.min.css\\">
<link rel=\\"icon\\" type=\\"image/gif\\" href=\\"/database.gif\\">
<style>
    input {
        text-align: center;
        width: 400px;
        height: 40px;
        margin: 5px;
    }
    button {
        width: 400px;
        height: 40px;
        margin: 10px;
    }
    .home {
        cursor: pointer;
    }
    .card {
        width: 450px;
        margin: auto;
    }
    .card > * {
        text-align: center;
    }
    .subtitle {
        margin: 10px;
    }
    .body {
        margin: 10px;
    }
</style>
<html lang=\\"en\\">
  <head>
    <title>learndatabases.dev</title>
  </head>
  <header>
    <h1 class=\\"home umami--click--home-button\\">Learn Databases</h1>
    
    
      <p><a href=\\"/signin\\" class=\\"umami--click--login-button\\">Login</a> / <a href=\\"/signup\\" class=\\"umami--click--signup-button\\">Signup</a></p>
    
  </header>
</html>
<script>
  const home = document.querySelector('.home')
  home.addEventListener('click', () => {
    return location.href = '/'
  })

  
</script>

<main>
    <div class=\\"card\\">
        <div class=\\"body\\">
            <h3 class=\\"subtitle\\">Set your password</h3>
            <input class=\\"password1\\" placeholder=\\"create new password\\" type=\\"password\\"/><br>
            <input class=\\"password2\\" placeholder=\\"confirm password\\" type=\\"password\\"/>
            <button class=\\"submit\\">Submit</button>
        </div>
    </div>
</main>

<script>
    const path = window.location.pathname.split('/')
    const token = path.pop()
    const password1 = document.querySelector('.password1')
    const password2 = document.querySelector('.password2')
    const submit = document.querySelector('.submit')

    submit.addEventListener('click', () => {
        if (password1.value !== password2.value) {
            return alert(\\"Passwords do not match. Please check again.\\")
        }
        fetch('/api/passwordReset', {
            method: \\"POST\\",
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                token: token,
                password: password1.value
            })
        }).then(r => r.json()).then((r) => {
            if (r.error) return alert(r.error.message)
            if (r.dbPassword) return location.href = '/'
            return location.href = '/setDBPassword'
        }).catch((err) => {
            alert(\\"Setting password has failed. Please try again.\\", err)
        })
    })
</script>

"
`;

exports[`test welcome page should render sign in page correctly 1`] = `
"<!--views/partials/head.ejs-->
<meta charset='UTF-8'>
<!--CSS (load bootstrap from a CDN)-->
<link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/open-fonts@1.1.1/fonts/inter.min.css\\">
<link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/@exampledev/new.css@1.1.2/new.min.css\\">
<link rel=\\"icon\\" type=\\"image/gif\\" href=\\"/database.gif\\">
<style>
    input {
        text-align: center;
        width: 400px;
        height: 40px;
        margin: 5px;
    }
    button {
        width: 400px;
        height: 40px;
        margin: 10px;
    }
    .home {
        cursor: pointer;
    }
    .card {
        width: 450px;
        margin: auto;
    }
    .card > * {
        text-align: center;
    }
    .subtitle {
        margin: 10px;
    }
    .body {
        margin: 10px;
    }
</style>
<html lang=\\"en\\">
  <head>
    <title>learndatabases.dev</title>
  </head>
  <header>
    <h1 class=\\"home umami--click--home-button\\">Learn Databases</h1>
    
    
      <p><a href=\\"/signin\\" class=\\"umami--click--login-button\\">Login</a> / <a href=\\"/signup\\" class=\\"umami--click--signup-button\\">Signup</a></p>
    
  </header>
</html>
<script>
  const home = document.querySelector('.home')
  home.addEventListener('click', () => {
    return location.href = '/'
  })

  
</script>

<main>
    <div class=\\"card\\">
        <div class=\\"body\\">
            <h3 class=\\"subtitle\\">Please log in</h3>
            <input class=\\"email\\" placeholder=\\"Email\\" /><br>
            <input class=\\"password\\" placeholder=\\"Password\\" type=\\"password\\"/>
            <button class=\\"submit\\">Submit</button>
        </div>
        <div class=\\"tale\\">
            <div>Forgot password? <a href=\\"/resetPassword\\">Reset Password</a></div>
            <div>Don't have account? <a href=\\"/signup\\">Sign Up</a></div>
        </div>
    </div>
</main>

<script>
    const email = document.querySelector('.email')
    const password = document.querySelector('.password')
    const submit = document.querySelector('.submit')

    submit.addEventListener('click', () => {
        fetch('/api/session', {
            method: \\"POST\\",
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                email: email.value.toLowerCase(),
                password: password.value
            })
        }).then(r => r.json()).then((r) => {
            if (r.error) return alert(r.error.message)
            return location.href = '/'
        })
    })
</script>

"
`;

exports[`test welcome page should render sign up page correctly 1`] = `
"<!--views/partials/head.ejs-->
<meta charset='UTF-8'>
<!--CSS (load bootstrap from a CDN)-->
<link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/open-fonts@1.1.1/fonts/inter.min.css\\">
<link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/@exampledev/new.css@1.1.2/new.min.css\\">
<link rel=\\"icon\\" type=\\"image/gif\\" href=\\"/database.gif\\">
<style>
    input {
        text-align: center;
        width: 400px;
        height: 40px;
        margin: 5px;
    }
    button {
        width: 400px;
        height: 40px;
        margin: 10px;
    }
    .home {
        cursor: pointer;
    }
    .card {
        width: 450px;
        margin: auto;
    }
    .card > * {
        text-align: center;
    }
    .subtitle {
        margin: 10px;
    }
    .body {
        margin: 10px;
    }
</style>
<html lang=\\"en\\">
  <head>
    <title>learndatabases.dev</title>
  </head>
  <header>
    <h1 class=\\"home umami--click--home-button\\">Learn Databases</h1>
    
    
      <p><a href=\\"/signin\\" class=\\"umami--click--login-button\\">Login</a> / <a href=\\"/signup\\" class=\\"umami--click--signup-button\\">Signup</a></p>
    
  </header>
</html>
<script>
  const home = document.querySelector('.home')
  home.addEventListener('click', () => {
    return location.href = '/'
  })

  
</script>

<div class=\\"card\\">
  <div class=\\"body\\">
    <h3 class=\\"subtitle\\">Create Account</h3>
    <input class=\\"email\\" type=\\"email\\" placeholder=\\"Email Address\\" required />
    <button class=\\"submit\\">Create Account</button>
  </div>
  <div class=\\"tale\\">Already have an account? <a href=\\"/signin\\">Login</a></div>

  <script>
    const submit = document.querySelector(\\".submit\\");
    const check = document.querySelector(\\".check\\");
    const email = document.querySelector(\\".email\\");

    submit.addEventListener(\\"click\\", () => {
      fetch(\\"/api/users\\", {
        method: \\"POST\\",
        headers: {
          \\"Content-Type\\": \\"application/json\\",
        },
        body: JSON.stringify({
          email: email.value.toLowerCase(),
        }),
      })
        .then((r) => r.json())
        .then((res) => {
          if (res.error) {
            const message = res.error.message;
            alert(message);
          } else {
            alert(
              \\"Check your email (don't forget to check the spam box!) and set your password\\"
            );
            return (location.href = \\"/signin\\");
          }
        });
    });
  </script>
</div>
"
`;

exports[`test welcome page should render welcome page correctly 1`] = `
"<!DOCTYPE html>
<!--views/partials/head.ejs-->
<meta charset='UTF-8'>
<!--CSS (load bootstrap from a CDN)-->
<link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/open-fonts@1.1.1/fonts/inter.min.css\\">
<link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/@exampledev/new.css@1.1.2/new.min.css\\">
<link rel=\\"icon\\" type=\\"image/gif\\" href=\\"/database.gif\\">
<style>
    input {
        text-align: center;
        width: 400px;
        height: 40px;
        margin: 5px;
    }
    button {
        width: 400px;
        height: 40px;
        margin: 10px;
    }
    .home {
        cursor: pointer;
    }
    .card {
        width: 450px;
        margin: auto;
    }
    .card > * {
        text-align: center;
    }
    .subtitle {
        margin: 10px;
    }
    .body {
        margin: 10px;
    }
</style>
<html lang=\\"en\\">
  <head>
    <title>learndatabases.dev</title>
  </head>
  <header>
    <h1 class=\\"home umami--click--home-button\\">Learn Databases</h1>
    
    
      <p><a href=\\"/signin\\" class=\\"umami--click--login-button\\">Login</a> / <a href=\\"/signup\\" class=\\"umami--click--signup-button\\">Signup</a></p>
    
  </header>
</html>
<script>
  const home = document.querySelector('.home')
  home.addEventListener('click', () => {
    return location.href = '/'
  })

  
</script>

<html lang=\\"en\\">
  </head>
  <body>
    <h2>Learn and try out different databases!</h2>
    <p>Instructions on how to install and setup your own databases are included in the tutorial.</p>

      <blockquote id=\\"postgres\\" class=\\"db-card umami--click--postgres-page\\">
        <h4 class=\\"db-title\\">PostgreSQL</h4>
        <p class=\\"db-discription\\">A relational database management system emphasizing extensibility and technical standards compliance.</p>
      </blockquote>
      <blockquote id=\\"elastic\\" class=\\"db-card umami--click--elasticsearch-page\\">
        <h4 class=\\"db-title\\">Elasticsearch</h4>
        <p class=\\"db-discription\\">A highly scalable full-text search analytics engine. It allows you to store, search and analyze big volumes of data quickly and in near real time.</p>
      </blockquote>
      <blockquote id=\\"arango\\" class=\\"db-card umami--click--arango-button\\">
        <h4 class=\\"db-title\\">Arango</h4>
        <p class=\\"db-discription\\">A multi-model database. Whether you want to store data in tables or graphs is up to you!</p>
      </blockquote>
      <blockquote id=\\"mongodb\\" class=\\"db-card darkenCards umami--click--mongodb-button\\">
        <h4 class=\\"db-title\\">MongoDB (coming next sprint!)</h4>
        <p class=\\"db-discription\\">An open source database management system using a document-oriented database model that supports various forms of data.<p>
			</blockquote>

    <p style=\\"text-align:center;\\">Everything we do here is open source. Checkout our github
    <a href=\\"https://github.com/garageScript/databases\\" class=\\"umami--click--github-anchor\\">Here</a></p>
    <hr>
    <h3>Sponsors</h3>
    <ul>
      <li>
        <p><a href=\\"https://c0d3.com\\" class=\\"umami--click--c0d3-anchor\\">C0d3</a> (They taught us to code)</p>
      </li>
    </ul>

    <p>Want to add a new Database or Sponsor? <a href=\\"https://github.com/garageScript/databases/issues\\" class=\\"umami--click--contact-us-anchor\\">Contact Us</a></p>
    <p>We collect anonymous analytics using <a href=\\"https://umami.is/\\">Umami</a>.<br>View live: <a href=\\"https://analytics.learndatabases.dev/share/9DRDvLQJ/LearnDatabases\\">analytics.learndatabases.dev</a></p>

    <div id=\\"banner\\">We just launched!<br><a href=\\"https://news.ycombinator.com/item?id=24554675\\" target=\\"_blank\\" class=\\"umami--click--discuss-anchor\\">Discuss on HN</a></div>
  </body>

  <style>
    .db-card {
      cursor: pointer;
    }
    .darkenCards {
      opacity: 60%;
    }
    .db-card:hover {
      border-left: solid 5px rgb(10, 70, 120);
    }
    #banner {
      position: fixed;
      background-color: rgb(170, 40, 10);
      box-shadow: 10px 10px rgba(100,100,100,0.5);
      right: 4rem;
      top: 4rem;
      padding: 1rem;
    }
    #banner > * {
      color: white;
    }
  </style>
  <script>
    document.getElementById('postgres').addEventListener('click', () => {
      setTimeout(() => {
        location.href = '/tutorial/Postgres'
      }, 10)
    })
    document.getElementById('elastic').addEventListener('click', () => {
      setTimeout(() => {
        location.href = '/tutorial/Elasticsearch'
      }, 10)
    })
    // document.getElementById('mongodb').addEventListener('click', () => {
    //   location.href = '/mongodb'
    // })
    document.getElementById('arango').addEventListener('click', () => {
      location.href = '/tutorial/Arango'
		})
  </script>

  <script async defer data-website-id=\\"d367293a-0e30-4ae1-bdce-3651e1b64909\\" src=\\"https://analytics.learndatabases.dev/umami.js\\"></script>

</html>
"
`;
