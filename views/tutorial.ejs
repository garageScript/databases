<%- include("./partials/head") %>
<h3>Learn <%= database %></h3>
<div id="introduction"></div>
<div id="content"></div>
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script
  src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.2.0/highlight.min.js"
  integrity="sha512-TDKKr+IvoqZnPzc3l35hdjpHD0m+b2EC2SrLEgKDRWpxf2rFCxemkgvJ5kfU48ip+Y+m2XVKyOCD85ybtlZDmw=="
  crossorigin="anonymous"
></script>
<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.2.0/styles/tomorrow.min.css"
  integrity="sha512-r3qr7vMdHYmWUzqC7l4H/W03ikAyiFIQld+B71yAmHhu7wcsnvm/adhikM+FzDxxK9ewznhCVnAm+yYZpPBnSg=="
  crossorigin="anonymous"
/>
<script>
  const dbHost = "<%= dbHost %>";
  const username = "<%= username %>";
  const dbPassword = "<%= dbPassword %>";
  const dbExists = "<%= dbExists %>";
  const database = "<%= database %>";

  const credentials = document.createElement("pre");
  const renderCredentials = (username, dbPassword) => {
    const creds = `host: ${dbHost}\nusername: ${username}\npassword: ${dbPassword}\n`;
    /**
     **** EACH TIME A DATABASE IS ADDED, ADD TO THE endingChoice OBJECT ****
     * This is the only change you need to make if you are altering
     * this file because another database has been implemented.
     */
    const endingChoice = {
      Postgres: `database: ${username}`,
      Elasticsearch: `index: ${username}-*`,
      Arango: `databaseName: ${username}`,
      Influx:`database: ${username}`
    };
    credentials.innerHTML = `<code>${creds}${endingChoice[database]}</code>`;
    introduction.append(credentials);
  };

  const content = document.getElementById("content");
  const renderContent = async (username, dbPassword) => {
    const r = await fetch(`/lessons/${database}.md`).then((r) => r.text());
    marked.setOptions({
      highlight: function (code) {
        return hljs.highlightAuto(code).value;
      },
    });
    const markedHTML = marked.parse(r);
    const markedHTMLwithUserData = markedHTML
      .replace(/@username/gi, username)
      .replace(/@dbPassword/gi, dbPassword);
    content.innerHTML = markedHTMLwithUserData;
  };

  let disabled;
  const createDb = async () => {
    if (disabled) return;
    disabled = true;
    createDb_button.classList.add("disabled");
    createDb_button.innerText = "Creating...";

    const res = await fetch(`/api/createDatabase/${database}`, {
      method: "POST",
    }).then((r) => r.json());
    const { error, username, dbPassword, email } = res;
    if (error) {
      alert(error.message);
      disabled = false;
      createDb_button.classList.remove("disabled");
      createDb_button.innerText = "Create my database";
      return;
    }
    alert(
      email
        ? "Your database has been successfully created!"
        : "Your temporary database has been successfully created!\r\nSince credentials are provided only once, please keep the information somewhere safe."
    );
    createDb_button.style.opacity = 0;
    setTimeout(() => {
      createDb_button.innerText = "Complete!";
      createDb_button.style.background = "rgb(10, 170, 75)";
      createDb_button.style.opacity = 1;
      setTimeout(() => {
        renderCredentials(username, dbPassword);
        renderContent(username, dbPassword);
      }, 200);
    }, 200);
  };

  const createDb_button = document.createElement("button");
  createDb_button.id = "createDb";
  createDb_button.innerText = "Create my database";
  createDb_button.addEventListener("click", createDb);

  (function setIntroduction() {
    const vowelsTable = ["A", "E", "I", "O", "U"].reduce((acc, vowel) => {
      acc[vowel] = true;
      return acc;
    }, {});
    const a = `a${vowelsTable[database[0]] ? "n" : ""}`;
    const introduction = document.getElementById("introduction");
    const messageOpening = `<p>In this module, you can learn how to use ${database}. `;
    if (!username || !dbExists) {
      const tense = !username ? "temporary " : "";
      const messageMiddle = `Don't have ${database} installed on your local machine yet? Fear not! We can make ${a} ${database} database for you. Simply click on the button below to create your ${tense}database. Credentials for your database will appear after it is done being created.</p>`;
      const messageEnding = !username
        ? `<p>Temporary database credentials will expire in 5 days. If you want, you can sign up with us and get a non-expiring ${database} database!</p>`
        : "";
      introduction.innerHTML = `${messageOpening}${messageMiddle}${messageEnding}`;
      introduction.append(createDb_button);
      return renderContent("username", "dbPassword");
    }
    introduction.innerHTML = `${messageOpening}You have already created ${a} ${database} database on our server. Here are the credentials for your database.</p>`;
    renderCredentials(username, dbPassword);
    renderContent(username, dbPassword);
  })();
</script>
<style>
  #createDb {
    display: block;
    margin: auto;
    margin-top: 26px;
    margin-bottom: 26px;
    transition: 0.2s;
  }

  #createDb.disabled {
    cursor: default;
  }
</style>
